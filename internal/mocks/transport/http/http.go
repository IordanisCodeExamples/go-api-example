// Code generated by MockGen. DO NOT EDIT.
// Source: internal/transport/http/http.go

// Package transporthttpmock is a generated GoMock package.
package transporthttpmock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	transport "github.com/junkd0g/go-api-example/internal/transport"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetMovie mocks base method.
func (m *MockService) GetMovie(ctx context.Context, title string) (*transport.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovie", ctx, title)
	ret0, _ := ret[0].(*transport.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovie indicates an expected call of GetMovie.
func (mr *MockServiceMockRecorder) GetMovie(ctx, title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovie", reflect.TypeOf((*MockService)(nil).GetMovie), ctx, title)
}
